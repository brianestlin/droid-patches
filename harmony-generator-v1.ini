# INPUTS:
#  I1: [mel cv] melody cv in
#  I2: [tie] chord changes not recognized while gate high here
#  I5: [root] root in, v/oct
#  I6: [chord] select from 10 chord types

# OUTPUTS:
#  O1: [mel] melody 1v/oct output
#  O2: [har 1] first harmony 1v/oct output
#  O3: [har 2] second harmony 1v/oct output
#  O4: [har 3] third harmony 1v/oct output
#  O5: [root] root of underlying chord
#  O6: [third] third of underlying chord
#  O7: [fifth] fifth of underlying chord
#  O8: [seventh] seventh of underlying chord

# CONTROLLER 1:
#  P1.1: [voicing] close, drop 2, or drop 2-4
#  B1.1: [dim] dim7 chords on non-chord-tones (or dimmaj7)
#  B1.2: [rand] random chords on non-chord-tones
#  B1.3: [other] other kinds of chords on non-chord-tones, press the button to cycle between chord types
#  B1.4: [randlock] the same random chord on every non-chord-tone (get a new random chord by pressing the button again)
#  B1.5: [para pass] parallel passing
#  B1.6: [fuzzy] a different version of the random algorithm
#  B1.7: [diatonic] all scale notes play diatonic chords, non-scale notes fall back to parallell passing
#  B1.8: [fixed/uni] fixed: melody note always = root, chord type is constant.  unison: all outputs play melody note

[p2b8]

# -------------------------------------------------
# Input
# -------------------------------------------------

# Quantize the melody CV input to semitones.
[quantizer]
    input = I1
    steps = 12
    bypass = 0
    output = _QUANTIZED_MEL_INPUT
    changed = _NOTECHANGE

# Convert the melody input to an integer note value.
[math]
    input1 = _QUANTIZED_MEL_INPUT * 120
    round = _MEL_INPUT_MIDI

# Determine the "pitch class" (C, C#, D, etc) of the melody input.
[math]
    input1 = _MEL_INPUT_MIDI
    input2 = 12
    modulo = _MEL_INPUT_PITCH

# Normalize -1 to the "tie" input so we can tell whether or not it's patched.
[copy]
    input = -1
    output = N2

# If "tie" input isn't patched, don't try to S&H the root input.
[compare]
    input = I2
    compare = -1
    ifequal = I5
    else = _SAMPLED_ROOT
    output = _ROOT_IN_V

# As long as the "tie" input is high, hold the existing root input.
[sample]
    input = I5
    sample = I2
    output = _SAMPLED_ROOT

# Ensure root input is non-negative.
[math]
    input1 = _ROOT_IN_V
    input2 = 0
    maximum = _ROOT_NONNEG

# Determine the "pitch class" of the root input.
[math]
    input1 = _ROOT_NONNEG * 24
    floor = _ROOT_INPUT_PITCH

# If "tie" input isn't patched, don't try to S&H the chord input.
[compare]
    input = I2
    compare = -1
    ifequal = I6
    else = _SAMPLED_CHORD
    output = _CHORD_IN_V

# As long as the "tie" input is high, hold the existing chord input.
[sample]
    input = I6
    sample = I2
    output = _SAMPLED_CHORD

# Make sure chord input is non-negative.
[math]
    input1 = _CHORD_IN_V
    input2 = 0
    maximum = _CHORD_NONNEG

# The chord input will select discretely one of 10 chord types (translated to Droid "degrees" by the switch below).
[math]
    input1 = _CHORD_NONNEG * 20
    floor = _CHORDTYPE

# The selectable chord types / degrees are:
# 0. dim7 / whole-half diminished (10)
# 1. min7b5 / locrian (23)
# 2. min7 / dorian (6)
# 3. sus7b9 / mixolydian sus4 b9 (16)
# 4. sus7 / mixolydian sus4 (3)
# 5. 7b9 / mixolydian b9 (18)
# 6. 7 / mixolydian (12)
# 7. maj7 / lydian (0)
# 8. altered / altered (4)
# 9. maj7#5 / maj7#5 (22)
[switch]
    input1 = 10
    input2 = 23
    input3 = 6
    input4 = 16
    input5 = 3
    input6 = 18
    input7 = 12
    input8 = 0
    input9 = 4
    input10 = 22
    offset = _CHORDTYPE
    output1 = _DEGREESEQ

# Trigger when the chord changes, for use in S&H circuits downstream.
[quantizer]
    input = _DEGREESEQ
    steps = 0.1
    changed = _DEGREECHANGE

# Trigger when the root changes, for use in S&H circuits downstream.
[quantizer]
    input = _ROOTSEQ
    steps = 0.1
    changed = _ROOTCHANGE

# VOICING 0 is close voicing, VOICING 1 is "drop 2", VOICING 2 is "drop 2-4".
[pot]
    pot = P1.1
    discrete = 3
    output = _VOICING

# -------------------------------------------------
# Harmony Algorithm Buttongroup
# -------------------------------------------------

# This buttongroup selects the harmony algorithm. The harmony algorithm determines how non-chord-tones are harmonized.
# - "Dim" constructs a fully-diminished chord down from the melody note.
# - "Rand" constructs a new random chord with each gate.
# - "DimMaj7" constructs a diminished maj7 chord with the melody note as the maj7.
# - "Para" (for "parallel" constructs a chord using the same intervals as were used to harmonize the most recent chord-tone.
[buttongroup]
    button1 = B1.1
    button2 = B1.2
    button3 = B1.3
    button4 = B1.4
    button5 = B1.5
    button6 = B1.6
    button7 = B1.7
    button8 = B1.8
    led1 = _B1_SELECTED
    led2 = L1.2
    led3 = _B3_SELECTED
    led4 = L1.4
    led5 = L1.5
    led6 = L1.6
    led7 = L1.7
    led8 = _B8_SELECTED
    extrapress = _EXTRAPRESS
    output = _HARMONIZER

# An extrapress on B1.1 toggles between "diminished" (fully lit) and "dim maj7" (half lit) modes.
[switch]
    input1 = 1
    input2 = 0.4
    forward = _EXTRAPRESS * _B1_SELECTED
    output1 = _B1_LED_LEVEL

# LED levels change with extrapresses, only when the button is selected in the buttongroup.
[compare]
    input = _B1_SELECTED
    compare = 1
    ifequal = _B1_LED_LEVEL
    else = 0
    output = L1.1

# An extrapress on B1.3 toggles between two other chords for passing tones, repesented by the deltas {-3,-2,-4} and {-2,-2,-5} respectively.  See the "other chord" section.
[switch]
    input1 = 1
    input2 = 0.4
    forward = _EXTRAPRESS * _B3_SELECTED
    output1 = _B3_LED_LEVEL

# LED levels change with extrapresses, only when the button is selected in the buttongroup.
[compare]
    input = _B3_SELECTED
    compare = 1
    ifequal = _B3_LED_LEVEL
    else = 0
    output = L1.3

# An extrapress on B1.8 toggles between "fixed para" (fully lit) and "unison" (half lit) modes.
[switch]
    input1 = 1
    input2 = 0.4
    forward = _EXTRAPRESS * _B8_SELECTED
    output1 = _B8_LED_LEVEL

# LED levels change with extrapresses, only when the button is selected in the buttongroup.
[compare]
    input = _B8_SELECTED
    compare = 1
    ifequal = _B8_LED_LEVEL
    else = 0
    output = L1.8

# -------------------------------------------------
# Underlying Chord
# -------------------------------------------------

# Based on the root input and chordtype input, this circuit determines the root, third, fifth, and seventh of the underlying chord. These are used for establishing pitch classes (below), so inversion/spread/pitch are held constant.
[chord]
    pitch = 0
    spread = 0
    inversion = 1
    root = _ROOTSEQ
    degree = _DEGREESEQ
    select1 = 1
    select3 = 1
    select5 = 1
    select7 = 1
    select9 = 0
    select11 = 0
    select13 = 0
    output1 = _ROOT_V
    output2 = _THIRD_V
    output3 = _FIFTH_V
    output4 = _SEVENTH_V

# Convert the root voltage to an integer note value.
[math]
    input1 = _ROOT_V * 120
    round = _ROOT_MIDI

# Convert the 3rd voltage to an integer note value.
[math]
    input1 = _THIRD_V * 120
    round = _THIRD_MIDI

# Convert the 5th voltage to an integer note value.
[math]
    input1 = _FIFTH_V * 120
    round = _FIFTH_MIDI

# Convert the 7th voltage to an integer note value.
[math]
    input1 = _SEVENTH_V * 120
    round = _SEVENTH_MIDI

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _ROOT_MIDI
    input2 = 12
    modulo = _ROOT_PITCH

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _THIRD_MIDI
    input2 = 12
    modulo = _THIRD_PITCH

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _FIFTH_MIDI
    input2 = 12
    modulo = _FIFTH_PITCH

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _SEVENTH_MIDI
    input2 = 12
    modulo = _SEVENTH_PITCH

# Compute deltas between chord tones.
[math]
    input1 = _ROOT_MIDI
    input2 = _THIRD_MIDI
    difference = _THIRD_MINUS_ROOT

# Compute deltas between chord tones.
[math]
    input1 = _THIRD_MIDI
    input2 = _FIFTH_MIDI
    difference = _FIFTH_MINUS_THIRD

# Compute deltas between chord tones.
[math]
    input1 = _FIFTH_MIDI
    input2 = _SEVENTH_MIDI
    difference = _SEVENTH_MINUS_FIFTH

# Compute deltas between chord tones.
[math]
    input1 = _SEVENTH_MIDI
    input2 = _ROOT_MIDI + 12
    difference = _ROOT_MINUS_SEVENTH

# Output underlying chord (for optional use in addition to the harmonized melody).
[copy]
    input = _ROOT_V
    output = O5

# Output underlying chord (for optional use in addition to the harmonized melody).
[copy]
    input = _THIRD_V
    output = O6

# Output underlying chord (for optional use in addition to the harmonized melody).
[copy]
    input = _FIFTH_V
    output = O7

# Output underlying chord (for optional use in addition to the harmonized melody).
[copy]
    input = _SEVENTH_V
    output = O8

# -------------------------------------------------
# Underlying Chord - extensions
# This section defines the pitch classes of the chord "extensions", that is, the scale notes that aren't part of the main 4-note chord.  This is only used for the "diatonic" harmonizer.
# -------------------------------------------------

# Based on the root input and chordtype input, this circuit determines the 9th/2nd, 11th/4th, and 13th/6th of the underlying chord/scale. These are used for establishing pitch classes (below), so inversion/spread/pitch are held constant.
[chord]
    pitch = 0
    spread = 0
    inversion = 1
    root = _ROOTSEQ
    degree = _DEGREESEQ
    select1 = 0
    select3 = 0
    select5 = 0
    select7 = 0
    select9 = 1
    select11 = 1
    select13 = 1
    output1 = _2ND_V
    output2 = _4TH_V
    output3 = _6TH_V

# Convert the 2nd voltage to an integer note value.
[math]
    input1 = _2ND_V * 120
    round = _2ND_MIDI

# Convert the 4th voltage to an integer note value.
[math]
    input1 = _4TH_V * 120
    round = _4TH_MIDI

# Convert the 7th voltage to an integer note value.
[math]
    input1 = _6TH_V * 120
    round = _6TH_MIDI

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _2ND_MIDI
    input2 = 12
    modulo = _2ND_PITCH

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _4TH_MIDI
    input2 = 12
    modulo = _4TH_PITCH

# Ensure we have an integer from 0-11 to represent the "pitch class" of the note.
[math]
    input1 = _6TH_MIDI
    input2 = 12
    modulo = _6TH_PITCH

# Compute deltas between extension tones.
[math]
    input1 = _ROOT_MIDI
    input2 = _2ND_MIDI
    difference = _2ND_MINUS_ROOT

# Compute deltas between extension tones.
[math]
    input1 = _2ND_MIDI
    input2 = _4TH_MIDI
    difference = _4TH_MINUS_2ND

# Compute deltas between extension tones.
[math]
    input1 = _4TH_MIDI
    input2 = _6TH_MIDI
    difference = _6TH_MINUS_4TH

# Compute deltas between extension tones.
[math]
    input1 = _6TH_MIDI
    input2 = _ROOT_MIDI + 12
    difference = _ROOT_MINUS_6TH

# -------------------------------------------------
# Matching Index
# The circuits in this section are used to figure out which chord tone matches the input melody pitch, if any. A corresponding index is then fed to a switch in the Output Harmony section.
# -------------------------------------------------

[multicompare]
    input = _MEL_INPUT_PITCH
    compare1 = _ROOT_PITCH
    compare2 = _THIRD_PITCH
    compare3 = _FIFTH_PITCH
    compare4 = _SEVENTH_PITCH
    ifequal1 = 0
    ifequal2 = 3
    ifequal3 = 2
    ifequal4 = 1
    else = -1
    output = _MATCHING_INDEX

# -------------------------------------------------
# Chordtone Harmony
# -------------------------------------------------

# Define a boolean representing whether the melody note is a chord tone.
[compare]
    input = _MATCHING_INDEX
    compare = -1
    ifequal = 0
    else = 1
    output = _IS_CHORD_TONE

# This switch determines *in which order* to subtract "deltas" (in semitones) in order to derive the correct chord inversion from the melody note.  I.e. if the melody note is the root, then to get the first harmony note you'd subtract the "root minus seventh" delta, but if the melody note is the third then to get the first harmony note you'd subtract "third minus root".
[switch]
    input1 = _ROOT_MINUS_SEVENTH
    input2 = _SEVENTH_MINUS_FIFTH
    input3 = _FIFTH_MINUS_THIRD
    input4 = _THIRD_MINUS_ROOT
    offset = _MATCHING_INDEX
    output1 = _RAW_CT_DELTA1
    output2 = _RAW_CT_DELTA2
    output3 = _RAW_CT_DELTA3

# Consider chord changes as well a note changes.
[logic]
    input1 = _DEGREECHANGE
    input2 = _ROOTCHANGE
    input3 = _NOTECHANGE
    or = _NOTE_OR_CHORD_CHANGE

# If we're changing notes to a chord tone, we'll clock our queues to save the chord tone deltas for use with the next non-chord-tone.
[logic]
    input1 = _NOTE_OR_CHORD_CHANGE
    input2 = _IS_CHORD_TONE
    and = _CHORD_TONE_NOTECHANGE_TOOSOON

# For reasons I don't completely understand, I need both a trigger delay here *and* the multiplication with IS_CHORD_TONE in the S&H circuits, in order to make sure that the deltas are sampled at the correct time (i.e., only when they represent chord-tone harmony).
[triggerdelay]
    input = _CHORD_TONE_NOTECHANGE_TOOSOON
    delay = 0.005
    output = _CHORD_TONE_NOTECHANGE

# When we move from a chord tone to a non-chord tone, we want the "chordtone" deltas to stay where they are. This is useful for parallel-passing harmony.
[sample]
    input = _RAW_CT_DELTA1
    sample = _CHORD_TONE_NOTECHANGE * _IS_CHORD_TONE
    output = _CHORDTONE_FIRST_DELTA

# When we move from a chord tone to a non-chord tone, we want the "chordtone" deltas to stay where they are. This is useful for parallel-passing harmony.
[sample]
    input = _RAW_CT_DELTA2
    sample = _CHORD_TONE_NOTECHANGE * _IS_CHORD_TONE
    output = _CHORDTONE_SECOND_DELTA

# When we move from a chord tone to a non-chord tone, we want the "chordtone" deltas to stay where they are. This is useful for parallel-passing harmony.
[sample]
    input = _RAW_CT_DELTA3
    sample = _CHORD_TONE_NOTECHANGE * _IS_CHORD_TONE
    output = _CHORDTONE_THIRD_DELTA

# -------------------------------------------------
# Alternative Harmony
# Circuits in this section choose between deltas based on the harmonizer algorithm selected.
# -------------------------------------------------

[switch]
    input1 = _ALTERNATIVE_FIRST_DELTA_DIM
    input2 = _ALTERNATIVE_FIRST_DELTA_RANDOM
    input3 = _ALTERNATIVE_FIRST_DELTA_OTHER
    input4 = _ALTERNATIVE_FIRST_DELTA_RANDOM
    input5 = _ALTERNATIVE_FIRST_DELTA_PARALLEL
    input6 = _ALTERNATIVE_FIRST_DELTA_FUZZY
    input7 = _NCT_DIATONIC_DELTA1
    input8 = 0
    offset = _HARMONIZER
    output1 = _ALTERNATIVE_FIRST_DELTA

[switch]
    input1 = _ALTERNATIVE_SECOND_DELTA_DIM
    input2 = _ALTERNATIVE_SECOND_DELTA_RANDOM
    input3 = _ALTERNATIVE_SECOND_DELTA_OTHER
    input4 = _ALTERNATIVE_SECOND_DELTA_RANDOM
    input5 = _ALTERNATIVE_SECOND_DELTA_PARALLEL
    input6 = _ALTERNATIVE_SECOND_DELTA_FUZZY
    input7 = _NCT_DIATONIC_DELTA2
    input8 = 0
    offset = _HARMONIZER
    output1 = _ALTERNATIVE_SECOND_DELTA

[switch]
    input1 = _ALTERNATIVE_THIRD_DELTA_DIM
    input2 = _ALTERNATIVE_THIRD_DELTA_RANDOM
    input3 = _ALTERNATIVE_THIRD_DELTA_OTHER
    input4 = _ALTERNATIVE_THIRD_DELTA_RANDOM
    input5 = _ALTERNATIVE_THIRD_DELTA_PARALLEL
    input6 = _ALTERNATIVE_THIRD_DELTA_FUZZY
    input7 = _NCT_DIATONIC_DELTA3
    input8 = 0
    offset = _HARMONIZER
    output1 = _ALTERNATIVE_THIRD_DELTA

# -------------------------------------------------
# Alternative Harmony: Diminished
# The "diminished" algorithm always harmonizes non-chord-tones by constructing a specific set of intervals down from the melody note. There are two options for this chord. The first option is composed of the deltas {-3, -3, -3} — essentially a fully-diminished 7th chord.  The second option is composed of the deltas {-5, -3, -3}, making the melody note the 7th of a diminished major 7th chord.
# -------------------------------------------------

# Provide a different first delta to the "diminished" algorithm depending on which toggle of the dimished button is selected. The other deltas are always -3.
[switch]
    input1 = -3
    input2 = -5
    forward = _EXTRAPRESS * _B1_SELECTED
    output1 = _ALTERNATIVE_FIRST_DELTA_DIM

[copy]
    input = -3
    output = _ALTERNATIVE_SECOND_DELTA_DIM

[copy]
    input = -3
    output = _ALTERNATIVE_THIRD_DELTA_DIM

# -------------------------------------------------
# Alternative Harmony: Random
# The "random" algorithm constructs a random set of intervals down from the melody note. Not entirely random though, there are some guardrails to make sure the notes are not all too spaced out or packed together.
# -------------------------------------------------

# Determine when to recompute random intervals. For "rand" algorithm, this is every note change. For "randlock" algorithm, it's every time the "randlock" button is pushed.
[multicompare]
    input = _HARMONIZER
    compare1 = 1
    compare2 = 3
    ifequal1 = _NOTECHANGE
    ifequal2 = _EXTRAPRESS * L1.4
    else = 0
    output = _RANDOMCLOCK

[copy]
    input = _EXTRAPRESS
    output = R3

[copy]
    input = _RANDOMCLOCK
    output = R4

# We're going to construct a random chord. The first interval in the chord (i.e. the "third" could be anything from a 2nd to a 4th above the root (2-5 semitones).
[random]
    clock = _RANDOMCLOCK
    minimum = 2
    maximum = 5
    steps = 4
    output = _RAND_3RD

# If the first pitch was a perfect 4th, above the root, then the second pitch has to be at least a perfect 5th above the root; otherwise it has to be at least a diminished 5th above the root.
[compare]
    input = _RAND_3RD
    compare = 5
    ifequal = 7
    else = 6
    output = _RAND_MIN_5TH

# The number of "steps" in the random circuit below depends on whether we said the 2nd interval could be diminished  or not.
[compare]
    input = _RAND_3RD
    compare = 5
    ifequal = 2
    else = 3
    output = _RAND_STEPS_5TH

# The second interval can go up to a maximum of an augmented 5th above the root (see above for its minimum).
[random]
    clock = _RANDOMCLOCK
    minimum = _RAND_MIN_5TH
    maximum = 8
    steps = _RAND_STEPS_5TH
    output = _RAND_5TH

# If the second interval was an augmented 5th above the root, then the third interval has to be at least a minor 7th above the root, otherwise it has to be at least a major 6th above the root.
[compare]
    input = _RAND_5TH
    compare = 8
    ifequal = 10
    else = 9
    output = _RAND_MIN_7TH

# The number of "steps" in the random circuit below depends on whether we said the 3rd interval could be a 6th or whether it has to be at least a minor 7th.
[compare]
    input = _RAND_5TH
    compare = 8
    ifequal = 2
    else = 3
    output = _RAND_STEPS_7TH

# The second interval can go up to a maximum of a major 7th above the root (see above for its minimum).
[random]
    clock = _RANDOMCLOCK
    minimum = _RAND_MIN_7TH
    maximum = 11
    steps = _RAND_STEPS_7TH
    output = _RAND_7TH

# Compute deltas between random chordtones.
[math]
    input1 = 0
    input2 = _RAND_3RD
    difference = _RAND_THIRD_MINUS_ROOT

# Compute deltas between random chordtones.
[math]
    input1 = _RAND_3RD
    input2 = _RAND_5TH
    difference = _RAND_FIFTH_MINUS_THIRD

# Compute deltas between random chordtones.
[math]
    input1 = _RAND_5TH
    input2 = _RAND_7TH
    difference = _RAND_SEVENTH_MINUS_FIFTH

# Compute deltas between random chordtones.
[math]
    input1 = _RAND_7TH
    input2 = 12
    difference = _RAND_ROOT_MINUS_SEVENTH

# This switch and the random circuit below allow the randomly-constructed chord to be inverted, i.e. so the melody note could be the root, third, fifth, or seventh of the random chord.
[switch]
    input1 = _RAND_ROOT_MINUS_SEVENTH
    input2 = _RAND_SEVENTH_MINUS_FIFTH
    input3 = _RAND_FIFTH_MINUS_THIRD
    input4 = _RAND_THIRD_MINUS_ROOT
    offset = _RAND_OFFSET
    output1 = _ALTERNATIVE_FIRST_DELTA_RANDOM
    output2 = _ALTERNATIVE_SECOND_DELTA_RANDOM
    output3 = _ALTERNATIVE_THIRD_DELTA_RANDOM

[random]
    clock = _RANDOMCLOCK
    minimum = 0
    maximum = 3
    steps = 4
    output = _RAND_OFFSET

# -------------------------------------------------
# Alternative Harmony: Other Chord
# The "other chord" algorithm always harmonizes non-chord-tones by constructing a specific set of intervals down from the melody note. There are two options for this chord. The first option is composed of the deltas {-3, -2, -4}, the second option is composed of the deltas {-2, -2, -5}.
# -------------------------------------------------

# Provide a different delta to the "other chord" algorithm depending on which toggle of the "other" button is selected.
[switch]
    input1 = -3
    input2 = -2
    forward = _EXTRAPRESS * _B3_SELECTED
    output1 = _ALTERNATIVE_FIRST_DELTA_OTHER

# Provide a different delta to the "other chord" algorithm depending on which toggle of the "other" button is selected.
[switch]
    input1 = -2
    input2 = -2
    forward = _EXTRAPRESS * _B3_SELECTED
    output1 = _ALTERNATIVE_SECOND_DELTA_OTHER

# Provide a different input to the "other" algorithm depending on which toggle of the dimished button is selected.
[switch]
    input1 = -4
    input2 = -5
    forward = _EXTRAPRESS * _B3_SELECTED
    output1 = _ALTERNATIVE_THIRD_DELTA_OTHER

# -------------------------------------------------
# Alternative Harmony: Parallel Passing
# Parallel passing harmony is trivial to implement due to the S&H circuits defined in the Chordtone Harmony section, which ensure the "chordtone" deltas hold the deltas as of the last chordtone harmony.
# -------------------------------------------------

[copy]
    input = _CHORDTONE_FIRST_DELTA
    output = _ALTERNATIVE_FIRST_DELTA_PARALLEL

[copy]
    input = _CHORDTONE_SECOND_DELTA
    output = _ALTERNATIVE_SECOND_DELTA_PARALLEL

[copy]
    input = _CHORDTONE_THIRD_DELTA
    output = _ALTERNATIVE_THIRD_DELTA_PARALLEL

# -------------------------------------------------
# Alternative Harmony: Fuzzy Parallel
# Fuzzy Parallel is essentially a random algorithm, but implemented differently. It starts with the Parallel Passing algorithm and then adds either 1, 0, or -1 (randomly chosen) to each delta.  This yields similar but subtly different results to the "random" algorithm.
# -------------------------------------------------

# Random offset for the first delta.
[random]
    clock = _NOTECHANGE
    minimum = -1
    maximum = 1
    steps = 3
    output = _RANDOMOFFSET1

# Random offset for the second delta.
[random]
    clock = _NOTECHANGE
    minimum = -1
    maximum = 1
    steps = 3
    output = _RANDOMOFFSET2

# Random offset for the third delta.
[random]
    clock = _NOTECHANGE
    minimum = -1
    maximum = 1
    steps = 3
    output = _RANDOMOFFSET3

# Add random offset to the delta computed by the parallel passing algorithm (and ensure the resulting delta is at least 1 semitone).
[math]
    input1 = _ALTERNATIVE_FIRST_DELTA_PARALLEL + _RANDOMOFFSET1
    input2 = -1
    minimum = _ALTERNATIVE_FIRST_DELTA_FUZZY

# Add random offset to the delta computed by the parallel passing algorithm (and ensure the resulting delta is at least 1 semitone).
[math]
    input1 = _ALTERNATIVE_SECOND_DELTA_PARALLEL + _RANDOMOFFSET2
    input2 = -1
    minimum = _ALTERNATIVE_SECOND_DELTA_FUZZY

# Add random offset to the delta computed by the parallel passing algorithm (and ensure the resulting delta is at least 1 semitone).
[math]
    input1 = _ALTERNATIVE_THIRD_DELTA_PARALLEL + _RANDOMOFFSET3
    input2 = -1
    minimum = _ALTERNATIVE_THIRD_DELTA_FUZZY

# -------------------------------------------------
# Alternative Harmony: Diatonic
# -------------------------------------------------

# See if the melody note matches the pitch of the 2nd, 4th, or 6th degree of the active scale.
[multicompare]
    input = _MEL_INPUT_PITCH
    compare1 = _2ND_PITCH
    compare2 = _4TH_PITCH
    compare3 = _6TH_PITCH
    ifequal1 = 3
    ifequal2 = 2
    ifequal3 = 1
    else = -1
    output = _EXT_MATCHING_INDEX

# This switch determines *in which order* to subtract "deltas" (in semitones) in order to derive the correct chord inversion from the melody note.  I.e. if the melody note is the root, then to get the first harmony note you'd subtract the "root minus seventh" delta, but if the melody note is the third then to get the first harmony note you'd subtract "third minus root".
[switch]
    input1 = _ROOT_MINUS_6TH
    input2 = _6TH_MINUS_4TH
    input3 = _4TH_MINUS_2ND
    input4 = _2ND_MINUS_ROOT
    offset = _EXT_MATCHING_INDEX
    output1 = _EXT_DELTA1
    output2 = _EXT_DELTA2
    output3 = _EXT_DELTA3

# If the input note matched any extension note, use diatonic harmony, otherwise fall back to parallel passing harmony.
[compare]
    input = _EXT_MATCHING_INDEX
    compare = -1
    ifequal = _ALTERNATIVE_FIRST_DELTA_PARALLEL
    else = _EXT_DELTA1
    output = _NCT_DIATONIC_DELTA1

# If the input note matched any extension note, use diatonic harmony, otherwise fall back to parallel passing harmony.
[compare]
    input = _EXT_MATCHING_INDEX
    compare = -1
    ifequal = _ALTERNATIVE_SECOND_DELTA_PARALLEL
    else = _EXT_DELTA2
    output = _NCT_DIATONIC_DELTA2

# If the input note matched any extension note, use diatonic harmony, otherwise fall back to parallel passing harmony.
[compare]
    input = _EXT_MATCHING_INDEX
    compare = -1
    ifequal = _ALTERNATIVE_THIRD_DELTA_PARALLEL
    else = _EXT_DELTA3
    output = _NCT_DIATONIC_DELTA3

# -------------------------------------------------
# Alternative Harmony: Fixed Parallel
# -------------------------------------------------

# This circuit lets the "fixed para" harmonizer override the root input with the melody note. (In "fixed para" mode, the melody note determines the chord root.)  This is all we need to implement this harmonizer because now the melody note is always equal to the chord root and so we always have "chordtone" harmony.
[compare]
    input = _HARMONIZER
    compare = 7
    ifequal = _MEL_INPUT_PITCH
    else = _ROOT_INPUT_PITCH
    output = _ROOTSEQ

# UNISON_OVERRIDE will later be multiplied by the pitch deltas, i.e. if it's 0, all pitch deltas will be 0 (hence unison) whereas if it's 1, the computed deltas (in this case based on "fixed para") will be used.
[switch]
    input1 = 1
    input2 = 0
    forward = _EXTRAPRESS * _B8_SELECTED
    output1 = _UNISON_OVERRIDE

# -------------------------------------------------
# Output Harmony
# -------------------------------------------------

# If the input note matched any chord note, use chordtone harmony, otherwise use alternative harmony.
[compare]
    input = _MATCHING_INDEX
    compare = -1
    ifequal = _ALTERNATIVE_FIRST_DELTA
    else = _CHORDTONE_FIRST_DELTA
    output = _FIRST_DELTA

# If the input note matched any chord note, use chordtone harmony, otherwise use alternative harmony.
[compare]
    input = _MATCHING_INDEX
    compare = -1
    ifequal = _ALTERNATIVE_SECOND_DELTA
    else = _CHORDTONE_SECOND_DELTA
    output = _SECOND_DELTA

# If the input note matched any chord note, use chordtone harmony, otherwise use alternative harmony.
[compare]
    input = _MATCHING_INDEX
    compare = -1
    ifequal = _ALTERNATIVE_THIRD_DELTA
    else = _CHORDTONE_THIRD_DELTA
    output = _THIRD_DELTA

# If harmonizer is "unison", all deltas are always zero.
[compare]
    input = _HARMONIZER
    compare = 7
    ifequal = _FIRST_DELTA * _UNISON_OVERRIDE
    else = _FIRST_DELTA
    output = _FIRST_DELTA_OR_UNISON

# If harmonizer is "unison", all deltas are always zero.
[compare]
    input = _HARMONIZER
    compare = 7
    ifequal = _SECOND_DELTA * _UNISON_OVERRIDE
    else = _SECOND_DELTA
    output = _SECOND_DELTA_OR_UNISON

# If harmonizer is "unison", all deltas are always zero.
[compare]
    input = _HARMONIZER
    compare = 7
    ifequal = _THIRD_DELTA * _UNISON_OVERRIDE
    else = _THIRD_DELTA
    output = _THIRD_DELTA_OR_UNISON

# The melody pitch.
[copy]
    input = _QUANTIZED_MEL_INPUT * 120
    output = _OUTPITCH1

# The first harmony pitch.
[copy]
    input = _OUTPITCH1 + _FIRST_DELTA_OR_UNISON
    output = _OUTPITCH2

# The second harmony pitch.
[copy]
    input = _OUTPITCH2 + _SECOND_DELTA_OR_UNISON
    output = _OUTPITCH3

# The third harmony pitch.
[copy]
    input = _OUTPITCH3 + _THIRD_DELTA_OR_UNISON
    output = _OUTPITCH4

# Assigns either 0 or a -1V offset, based on the value of the VOICING pot, to be applied to the 2nd pitch.
# VOICING 0 is close voicing, VOICING 1 is "drop 2", VOICING 2 is "drop 2-4".
[switch]
    input1 = 0
    input2 = -1V
    input3 = -1V
    offset = _VOICING
    output1 = _DROP2_V

# Assigns either 0 or a -1V offset, based on the value of the VOICING pot, to be applied to the 4th pitch.
# VOICING 0 is close voicing, VOICING 1 is "drop 2", VOICING 2 is "drop 2-4".
[switch]
    input1 = 0
    input2 = 0
    input3 = -1V
    offset = _VOICING
    output1 = _DROP4_V

# Melody v/oct output.
[copy]
    input = _OUTPITCH1 / 120
    output = O1

# First harmony v/oct output (possibly dropped an octave depending on voicing).
[copy]
    input = _OUTPITCH2 / 120 + _DROP2_V
    output = O2

# Second harmony v/oct output.
[copy]
    input = _OUTPITCH3 / 120
    output = O3

# Third harmony v/oct output (possibly dropped an octave depending on voicing).
[copy]
    input = _OUTPITCH4 / 120 + _DROP4_V
    output = O4

# -------------------------------------------------
# TODO
# TODO:
# - Consider cycling the random notes in "random" algo when "tie" is patched and a new gate is received.
# - Consider using "fixed-para" for non-chord-tones (i.e. based on root instead of based on last chordtone played) as an alternative "para pass" mode.
# - Consider allowing inversion selection for "fixed para" -- i.e., melody note could be the 7th, 5th, or 3rd instead of the root.
# -------------------------------------------------
